/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.warp10.warpfleet.synchronizer;

import io.warp10.warpfleet.synchronizer.api.RepositoriesManager;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;

import static spark.Spark.before;
import static spark.Spark.delete;
import static spark.Spark.exception;
import static spark.Spark.get;
import static spark.Spark.ipAddress;
import static spark.Spark.notFound;
import static spark.Spark.options;
import static spark.Spark.port;
import static spark.Spark.put;
import static spark.Spark.staticFiles;
import static spark.Spark.threadPool;

/**
 * The type Warp fleet synchronizer.
 */
public class WarpFleetSynchronizer {
  private static Logger LOG = LoggerFactory.getLogger(WarpFleetSynchronizer.class);
  private static RepositoriesManager repositoriesManager;

  /**
   * The entry point of application.
   *
   * @param args the input arguments
   */
  @SuppressWarnings("DanglingJavadoc")
  public static void main(String[] args) {
    if (args.length != 1) {
      LOG.error("Missing configuration file");
      System.exit(1);
    }
    try {
      repositoriesManager = new RepositoriesManager(args[0], "macros");

      port(repositoriesManager.getConf().optInt("port", 8080));
      ipAddress(repositoriesManager.getConf().optString("host", "0.0.0.0"));
      threadPool(8);
      // Serving macros
      staticFiles.externalLocation(new File(repositoriesManager.getMacroPath()).getAbsolutePath());

      // add CORS
      options("/api/*", (request, response) -> {
        String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
        if (accessControlRequestHeaders != null) {
          response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
        }
        String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
        if (accessControlRequestMethod != null) {
          response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
        }
        return "OK";
      });

      // Before filter
      before("/*", (req, res) -> res.header("Content-Type", "text/plain"));
      before("/api/*", (req, res) -> {
        res.header("Access-Control-Allow-Origin", repositoriesManager.getConf().optString("remotes", ""));
        res.header("Access-Control-Request-Method", "GET,PUT,OPTIONS,DELETE");
        res.header("Access-Control-Allow-Headers", "*");
        res.header("Content-Type", "application/json");
      });

      /**
       * @api {get} /api/repos Request all configured repos
       * @apiName getRepos
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiSuccess {Object[]}  repos list of git repositories.
       */
      get("/api/repos", (request, response) -> repositoriesManager.getRepos());

      /**
       * @api {get} /api/repos/:repo fetch a repository by its name
       * @apiName getRepo
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiParam {String} repo Repository name.
       *
       * @apiSuccess {Object}  repository Repository.
       */
      get("/api/repos/:repo", (request, response) -> repositoriesManager.getRepo(request.params(":repo")));

      /**
       * @api {delete} /api/repos/:repo delete a repository by its name
       * @apiName deleteRepository
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiParam {String} repo Repository name.
       *
       * @apiSuccess {Object}  status status.
       */
      delete("/api/repos/:repo", (request, response) -> new JSONObject().put("status", repositoriesManager.deleteRepository(request.params(":repo"))));

      /**
       * @api {put} /api/repos Add a new repository
       * @apiName addRepository
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiParam {Object} repository Repository.
       *
       * @apiSuccess {Object}  status status.
       */
      put("/api/repos", (request, response) -> new JSONObject().put("status", repositoriesManager.addRepository(new JSONObject(request.body()))));
      /**
       * @api {put} /api/repos update a repository by its name
       * @apiName updateRepository
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiParam {Object} repository Repository.
       * @apiParam {String} repo Repository name.
       *
       * @apiSuccess {Object}  status status.
       */
      put("/api/repos/:repo", (request, response) -> new JSONObject().put("status", repositoriesManager.updateRepository(request.params(":repo"), new JSONObject(request.body()))));

      /**
       * @api {get} /api/sync/:repo synchronize a particular repo
       * @apiName sync
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiParam {String} repo Repository name.
       *
       * @apiSuccess {Object}  status status.
       */
      get("/api/sync/:repo", (request, response) -> new JSONObject().put("status", repositoriesManager.sync(request.params(":repo"))));

      /**
       * @api {get} /api/sync synchronize all
       * @apiName syncAll
       * @apiGroup WarpFleetSynchronizer
       *
       * @apiSuccess {Object}  status status.
       */
      get("/api/sync", (request, response) -> new JSONObject().put("status", repositoriesManager.syncAll()));


      // exception catching
      exception(Exception.class, (e, req, res) -> {
        LOG.error(e.getMessage(), e);
        res.status(500);
        res.body(new JSONObject().put("message", e.getMessage()).toString());
      });

      exception(GitAPIException.class, (e, req, res) -> {
        LOG.error(e.getMessage(), e);
        res.status(501);
        res.body(new JSONObject().put("message", e.getMessage()).toString());
      });

      // 404 catching
      notFound((req, res) -> {
        res.status(404);
        return new JSONObject().put("message", "Not found");
      });

    } catch (Exception e) {
      LOG.error(e.getMessage(), e);
      System.exit(1);
    }
  }
}
